##
##  NGINX-Reverse-Proxy für SealAI
##  – Produktion / Let’s Encrypt / HTTP→HTTPS / WebSockets
##

# ------------------------------------------------------------
# 1) HTTP  →  zwingend HTTPS umleiten
# ------------------------------------------------------------
server {
    listen      80;
    listen      [::]:80;
    server_name sealai.net www.sealai.net auth.sealai.net;

    return 301 https://$host$request_uri;   # komplette URL beibehalten
}

# ------------------------------------------------------------
# 2) Haupt-vHost  ( https://sealai.net )
# ------------------------------------------------------------
server {
    listen      443 ssl http2;
    listen      [::]:443 ssl http2;
    server_name sealai.net;

    # ---- Let’s Encrypt-Zertifikate ----
    ssl_certificate      /etc/letsencrypt/live/sealai.net/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/sealai.net/privkey.pem;

    # ---- Security-Header ----
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options        SAMEORIGIN;
    add_header X-XSS-Protection       "1; mode=block";
    add_header Referrer-Policy        no-referrer;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # ---- Proxy-Tunings (größere Header ≙ NextAuth-Tokens) ----
    client_max_body_size          25m;
    proxy_read_timeout            120s;
    proxy_send_timeout            120s;
    proxy_buffering               off;      # wichtig fürs Streaming
    proxy_buffers                 16 128k;
    proxy_buffer_size             128k;
    proxy_busy_buffers_size       256k;
    large_client_header_buffers   16 128k;

    # ---- Gemeinsame Proxy-Header inkl. WS-Upgrade ----
    include snippets/sealai_proxy_headers.conf;

    # 2a) REST-API  +  LangChain-SSE
    location ^~ /api/v1/ {
        proxy_pass http://backend:8000;
    }

    # 2b) WebSocket-Endpoint  →  /api/v1/ws/chat   (Legacy Chat-Stream)
    location ^~ /api/v1/ws/chat {
        proxy_pass          http://backend:8000;
        proxy_http_version  1.1;
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection "upgrade";
        proxy_set_header    Host $host;
    }

    # 2c) WebSocket-Endpoint  →  /api/v1/ai/ws   (OpenAI-kompatibel, NEU!)
    location ^~ /api/v1/ai/ws {
        proxy_pass          http://backend:8000;
        proxy_http_version  1.1;
        proxy_set_header    Upgrade $http_upgrade;
        proxy_set_header    Connection "upgrade";
        proxy_set_header    Host $host;
    }

    # 2d) Health-Check
    location = /health {
        proxy_pass http://backend:8000/health;
    }

    # 2e) Next.js-Frontend (SSR + RSC)
    location / {
        proxy_pass http://frontend:3000;
    }

    # 2f) Keycloak-Discovery, falls Frontend direkt darauf zugreift
    location ^~ /realms/        { proxy_pass http://keycloak:8080; }
    location ^~ /resources/     { proxy_pass http://keycloak:8080; }
    location ^~ /login-actions/ { proxy_pass http://keycloak:8080; }
}

# ------------------------------------------------------------
# 3) Auth-Subdomain  ( https://auth.sealai.net )
# ------------------------------------------------------------
server {
    listen      443 ssl http2;
    listen      [::]:443 ssl http2;
    server_name auth.sealai.net;

    ssl_certificate      /etc/letsencrypt/live/auth.sealai.net/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/auth.sealai.net/privkey.pem;

    #  gleiche Buffer-Größen wie oben – Keycloak setzt große Cookies
    proxy_buffers                 16 128k;
    proxy_buffer_size             128k;
    proxy_busy_buffers_size       256k;
    large_client_header_buffers   16 128k;

    include snippets/sealai_proxy_headers.conf;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Root → Admin-Konsole
    location = / { return 301 /admin/; }

    # Voller Keycloak-Proxy
    location / {
        proxy_pass http://keycloak:8080;
    }
}
