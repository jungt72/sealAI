version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    env_file: .env
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - sealai_postgres_data:/var/lib/postgresql/data
    networks:
      - sealai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    restart: always
    networks:
      - sealai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: always
    ports:
      - "6333:6333"
    volumes:
      - sealai_qdrant_storage:/qdrant/storage
    networks:
      - sealai_network

  keycloak:
    build:
      context: ./keycloak
    container_name: keycloak
    restart: always
    env_file:
      - .env
      - .env.keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: auth.sealai.net
      KC_PROXY: edge
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_LOG_LEVEL: info
    command: ["start", "--import-realm"]
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./keycloak/themes:/opt/keycloak/themes
    networks:
      - sealai_network
    depends_on:
      postgres:
        condition: service_healthy

  backend:
    build:
      context: ./backend
    container_name: backend
    restart: always
    env_file:
      - .env
      - .env.backend
    environment:
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app
      - ./backend/main.py:/app/main.py
      - ./backend/alembic.ini:/app/alembic.ini
      - ./backend/alembic:/app/alembic
      - ./backend/docs:/app/docs
      - ./backend/requirements.txt:/app/requirements.txt
      - sentence_transformers_cache:/root/.cache/torch/sentence_transformers
    networks:
      - sealai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import sys,urllib.request; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/health').status==200 else sys.exit(1)"
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    restart: always
    env_file:
      - .env
      - ./frontend/.env.local
    ports:
      - "3000:3000"
    networks:
      - sealai_network
    depends_on:
      backend:
        condition: service_healthy

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      - backend
      - frontend
      - keycloak
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
    networks:
      - sealai_network

networks:
  sealai_network:
    driver: bridge

volumes:
  sealai_postgres_data:
  sealai_qdrant_storage:
  sentence_transformers_cache:
