version: "3.8"

services:
  # ------------------------------------------------------------------
  #  PostgreSQL
  # ------------------------------------------------------------------
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    env_file: ./backend/.env
    environment:
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - sealai_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [sealai_network]

  # ------------------------------------------------------------------
  #  Redis Stack – nur Server, ohne Insight-UI
  # ------------------------------------------------------------------
  redis:
    image: redis/redis-stack-server:7.4.0-v6
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"         # Insight-Port 8001 aus Security-Gründen weggelassen
    environment:
      - REDIS_ARGS=--appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: [sealai_network]

  # ------------------------------------------------------------------
  #  Einmaliger Init-Job – legt RediSearch-Indizes an
  # ------------------------------------------------------------------
  redis-init:
    image: sealai-backend
    container_name: redis-init
    command: >
      python - <<'PY'
      import asyncio, os
      from langgraph.checkpoint.redis.aio import AsyncRedisSaver
      async def main():
          saver = AsyncRedisSaver(redis_url=os.environ["REDIS_URL"], index_name="checkpoints")
          await saver.asetup()      # idempotent
          print("✅  RediSearch-Index 'checkpoints' angelegt/aktualisiert")
      asyncio.run(main())
      PY
    environment:
      REDIS_URL: redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    restart: "no"
    networks: [sealai_network]

  # ------------------------------------------------------------------
  #  Qdrant Vektor-DB
  # ------------------------------------------------------------------
  qdrant:
    image: qdrant/qdrant:v1.15.0
    container_name: qdrant
    restart: always
    env_file: ./backend/.env
    ports:
      - "6333:6333"
    volumes:
      - sealai_qdrant_storage:/qdrant/storage
    networks: [sealai_network]

  # ------------------------------------------------------------------
  #  Keycloak (IdP)
  # ------------------------------------------------------------------
  keycloak:
    build: ./keycloak
    container_name: keycloak
    restart: always
    env_file: ./backend/.env
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: auth.sealai.net
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_HTTPS_CERTIFICATE_FILE: /etc/x509/https/tls.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/x509/https/tls.key
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - ./certs/tls.crt:/etc/x509/https/tls.crt:ro
      - ./certs/tls.key:/etc/x509/https/tls.key:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks: [sealai_network]

  # ------------------------------------------------------------------
  #  FastAPI Backend
  # ------------------------------------------------------------------
  backend:
    build: ./backend
    container_name: backend
    restart: always
    env_file: ./backend/.env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
      redis-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [sealai_network]

  # ------------------------------------------------------------------
  #  Next.js Frontend
  # ------------------------------------------------------------------
  frontend:
    build: ./frontend
    container_name: frontend
    restart: always
    env_file: ./frontend/.env.local
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    networks: [sealai_network]

  # ------------------------------------------------------------------
  #  Nginx – TLS-Terminator & Reverse-Proxy
  # ------------------------------------------------------------------
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
      keycloak:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/docker-entrypoint-wait.sh:/docker-entrypoint.d/00-wait-backend.sh:ro
    networks: [sealai_network]

# --------------------------------------------------------------------
#  Netzwerke & Volumes
# --------------------------------------------------------------------
networks:
  sealai_network:
    driver: bridge

volumes:
  sealai_postgres_data:
  redis_data:
  sealai_qdrant_storage:
