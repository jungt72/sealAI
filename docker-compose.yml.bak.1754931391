version: "3.8"

services:
  # ------------------------------------------------------------------
  # PostgreSQL (persistente DB)
  # ------------------------------------------------------------------
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    env_file: ./backend/.env
    environment:
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - sealai_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [sealai_network]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ------------------------------------------------------------------
  # Redis Stack (inkl. RediSearch, für LangGraph Memory)
  # -> Keine Ports nach außen publishen (nur intern benötigt)
  # ------------------------------------------------------------------
  redis:
    image: redis/redis-stack-server:7.4.0-v6
    container_name: redis
    restart: unless-stopped
    environment:
      - REDIS_ARGS=--appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks: [sealai_network]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ------------------------------------------------------------------
  # Qdrant (Vektor-Datenbank für RAG)
  # -> Keine Ports nach außen publishen (nur intern benötigt)
  # ------------------------------------------------------------------
  qdrant:
    image: qdrant/qdrant:v1.15.0
    container_name: qdrant
    restart: always
    env_file: ./backend/.env
    volumes:
      - sealai_qdrant_storage:/qdrant/storage
    networks: [sealai_network]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ------------------------------------------------------------------
  # Keycloak (Identity Provider)
  # -> Keine Ports nach außen publishen; Nginx terminiert TLS und
  #    proxied intern auf https://keycloak:8443
  # ------------------------------------------------------------------
  keycloak:
    build: ./keycloak
    container_name: keycloak
    restart: always
    env_file: ./backend/.env
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: auth.sealai.net
      KC_HTTPS_CERTIFICATE_FILE: /etc/x509/https/tls.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/x509/https/tls.key
      # Proxy-sichere Header & URL-Generierung
      KC_PROXY: edge
      PROXY_ADDRESS_FORWARDING: "true"
    volumes:
      - ./certs/tls.crt:/etc/x509/https/tls.crt:ro
      - ./certs/tls.key:/etc/x509/https/tls.key:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks: [sealai_network]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ------------------------------------------------------------------
  # FastAPI Backend (mit LangGraph-Swarm, Redis-Memory, Qdrant-RAG)
  # ------------------------------------------------------------------
  backend:
    build: ./backend
    container_name: backend
    restart: always
    env_file: ./backend/.env
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
      QDRANT_URL: http://qdrant:6333

      # === Origin-/WS-Sicherheit ===
      # Mehrere erlaubte Origins per Komma getrennt
      ALLOWED_ORIGIN: "https://sealai.net,https://www.sealai.net"
      # Für lokale CLI-Tests in Prod auf "0" lassen
      ALLOW_WS_ORIGIN_ANY: "${ALLOW_WS_ORIGIN_ANY:-0}"

      LOG_LEVEL: "INFO"
    # Backend-Port nur publishen, wenn du lokal testen willst.
    # Für reine Prod hinter Nginx kannst du die folgende ports-Zeile entfernen.
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started
    healthcheck:
      # nutzt wget (in slim-Image vorhanden), nicht curl
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [sealai_network]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ------------------------------------------------------------------
  # Next.js Frontend
  # ------------------------------------------------------------------
  frontend:
    build: ./frontend
    container_name: frontend
    restart: always
    env_file: ./frontend/.env.local
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    networks: [sealai_network]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ------------------------------------------------------------------
  # Nginx (TLS-Terminator & Reverse Proxy)
  # ------------------------------------------------------------------
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
      keycloak:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/docker-entrypoint-wait.sh:/docker-entrypoint.d/00-wait-backend.sh:ro
    networks: [sealai_network]
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# --------------------------------------------------------------------
# Netzwerke & Volumes (nur persistent!)
# --------------------------------------------------------------------
networks:
  sealai_network:
    driver: bridge

volumes:
  sealai_postgres_data:
  redis_data:
  sealai_qdrant_storage:
